{"mappings":"YA8CkB,IAIZA,EAAM,WAEV,OADAC,QAAQC,IAAI,cACLC,G,EAEHA,EAAM,WACVF,QAAQC,IAAI,e,EARZD,QAAQC,IAAI,cACLF,IAYM,IAATI,EAAa,SAAUC,GAC3B,IAAIC,EAAQ,EACPC,GAAU,EAAVC,GAAU,EAAVC,OAAUC,E,IAAf,QAAKC,EAAAC,EAAcP,EAAKQ,OAAAC,cAAnBP,GAAAI,EAAAC,EAAUG,QAAAC,MAAVT,GAAU,GACbD,GADGK,EAAUM,K,WAAVT,GAAU,EAAVC,EAAUS,C,aAAVX,GAAU,MAAVK,EAAUO,QAAVP,EAAUO,Q,YAAVX,E,MAAAC,C,EAGL,OAAOH,C,EA6BHc,GA1BKhB,EAAW,CAAC,GAAI,GAAI,MACpBA,EAAW,CAAC,GAAI,GAAI,OACpBA,EAAW,CAAC,GAAI,GAAI,MAwBf,CAAC,iBAAkB,aAAc,gBAE3CiB,EAAW,SAAUC,EAASC,G,IAE7BhB,GAAU,EAAVC,GAAU,EAAVC,OAAUC,E,IAAf,QAAKC,EAAAC,EAAcU,EAAOT,OAAAC,cAArBP,GAAAI,EAAAC,EAAUG,QAAAC,MAAVT,GAAU,EAAa,CAEX,GAFZI,EAAUM,QAEAM,EAEgB,MAApB,QAAiBC,OAATD,E,WAJdf,GAAU,EAAVC,EAAUS,C,aAAVX,GAAU,MAAVK,EAAUO,QAAVP,EAAUO,Q,YAAVX,E,MAAAC,C,EAQsB,MAApB,YAAqBe,OAATD,E,EAGrBtB,QAAQC,IAAImB,EAASD,EAAS,gBAC9BnB,QAAQC,IAAImB,EAASD,EAAS,eAC9BnB,QAAQC,IAAImB,EAASD,EAAS,mBAElB,CAAC,MAAO,SAAU,UACVK,SAASC,MAAQ,QAAaF,OAALE,MAAS,OAAYF,OAALE,MAD7D,IASMC,EAAK,SAAUC,EAAGC,EAAGC,GAAG,QAAAC,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,EAAA,EAAAA,EAAA,EAAO,GAAPK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,EAAA,GAAAJ,UAAAI,GAC5BnC,QAAQC,IAAI,GAAQsB,OAALI,EAAE,KAAQJ,OAALK,EAAE,KAAKL,OAAFM,GAAKI,E,EAGhCP,EAAG,MAAO,EAAG,EAAG,GAChBA,EAAG,MAAO,EAAG,EAAG,GAChBA,EAAG,QAAS,EAAG,EAAG,GC/HlB1B,QAAQC,IADA,G","sources":["src/js/module-one.js","src/js/module-two.js"],"sourcesContent":["// function processCall(recipient) {\n//   // Имитируем доступность абонента случайным числом\n//   const isRecipientAvailable = Math.random() > 0.5;\n\n//   if (!isRecipientAvailable) {\n//     console.log(`Абонент ${recipient} недоступен, оставьте сообщение.`);\n//     // Логика активации автоответчика\n//   } else {\n//     console.log(`Соединяем с ${recipient}, ожидайте...`);\n//     // Логика принятия звонка\n//   }\n// }\n\n// processCall('Манго');\n\n// function calcNum(price) {\n//   const numValue = Math.rondom() > 0.5;\n\n//   if (!numValue) {\n//     console.log(`what num${price} wait!`);\n//   } else {\n//     console.log(`Num is${price}`);\n//   }\n// }\n// calcNum('price');\n\n// const add = function (a, b, c) {\n//   console.log('total:');\n//   return a + b + c;\n// };\n\n// const add1 = add(1, 2, 3);\n// console.log('add1:', add1);\n\n// const add2 = add((1, 2, 3) * 2);\n// console.log('add2:', add2);\n\n// const loginPassword = function (admin, user) {\n//   const ADMIN_PASSWORD = \"\";\n//   let i = 0;\n//   for (let i = 0; i >= ADMIN_PASSWORD.length; i++)\n\n// };\n\n//  стек вызовов функций\n\nconst fnA = function () {\n  console.log('Total one:');\n  return fnB();\n};\nconst fnB = function () {\n  console.log('Total two:');\n  return fnC();\n};\nconst fnC = function () {\n  console.log('Total three:');\n};\nfnA();\n\n//  сложение массива\nconst totalPrice = function (items) {\n  let total = 0;\n  for (const item of items) {\n    total += item;\n  }\n  return total;\n};\n\nconst t1 = totalPrice([21, 34, 123]);\nconst t2 = totalPrice([12, 12, 1223]);\nconst t3 = totalPrice([15, 23, 123]);\n\n// console.log('t1:', t1);\n// console.log('t2:', t2);\n// console.log('t3:', t3);\n\n// функция \"name\" для перебора и логирования\n\n// const logItems = function (items) {\n//   let total = 0;\n//   for (const item of items) {\n//     console.log(items);\n//   }\n// };\n\n// logItems(['one', 'two', 'three']);\n// logItems([4, 5, 6]);\n// logItems(['seven', 'eght', 'nine']);\n\n// напиши функцию findPass(allPass, passFind) для поиска логина\n//  если логина нет, вывести сообщение \"пользователь `${passFind}` не найден\"\n//  если логин найден, вывести сообщение \"пользователь `${passFind}` найден\"\n\n// 1.объявляем переменную с массивом паролей ['','']\nconst allPass = ['123@%!@##%%%11', '12!@!@#f11', '1rf13f4@33r'];\n// 2.объяляем функцию с аргументами (массив паролей, пароль найден)\nconst findPass = function (allPass, passFind) {\n  // 3.через for...of перебираем итерируемые объекты\n  for (const pass of allPass) {\n    // 4.булевая проверка\n    if (pass === passFind) {\n      // 5.возвращаем проверку из функции\n      return `find ${passFind}`;\n    }\n  }\n  // 6.возврат если проверка не прошла\n  return `not find ${passFind}`;\n};\n// 7.объявляем лог внутри которого(имя функции(имя массива, \"один элемент массива\"))\nconsole.log(findPass(allPass, '12cvbcvbf11'));\nconsole.log(findPass(allPass, '12!@!@#f11'));\nconsole.log(findPass(allPass, '123@%!@##%%%11'));\n\nconst arr = ['123', 'lkimv2', 'knjunu'];\nconst message = arr.includes(find) ? `find ${find}` : `not ${find}`;\n\nconst box = {\n  item: 'asd',\n  name: 'aasdf',\n  secondName: 'asd',\n};\n\nconst fn = function (a, b, c, ...args) {\n  console.log(`${a} ${b} ${c}`, args);\n};\n\nfn('one', 1, 2, 3);\nfn('two', 4, 5, 6);\nfn('three', 7, 8, 9);\n","let i = 20;\nconsole.log(i);\n"],"names":["$043124137256a822$var$fnB","console","log","$043124137256a822$var$fnC","$043124137256a822$var$totalPrice","items","total","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","$043124137256a822$var$allPass","$043124137256a822$var$findPass","allPass1","passFind","concat","includes","find","$043124137256a822$var$fn","a","b","c","_len","arguments","length","args","Array","_key"],"version":3,"file":"index.a282c50f.js.map"}